/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DataModel.Article;
import DataService.*;
import chrriis.dj.nativeswing.swtimpl.NativeInterface;
import chrriis.dj.nativeswing.swtimpl.components.JWebBrowser;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import org.icepdf.ri.common.SwingController;
import org.icepdf.ri.common.SwingViewBuilder;
import org.icepdf.ri.common.views.DocumentViewControllerImpl;
import org.pushingpixels.substance.api.skin.SubstanceBusinessBlueSteelLookAndFeel;
import org.pushingpixels.substance.api.skin.SubstanceGraphiteLookAndFeel;
import utilities.Utilities;

/**
 *
 * @author akhan
 */
public final class Entrymain extends javax.swing.JFrame {

    /**
     * Creates new form Entry main
     */
    public static JWebBrowser googleview = new JWebBrowser();
    public static JWebBrowser googlescholarview = new JWebBrowser();
    String primarypdffiletitle;
    public static List<Article> articleList = new ArrayList<>();
    String searchquery;

    public Entrymain() {
        initComponents();
        nextBtn.setEnabled(false);
        previousBtn.setEnabled(false);
        Dimension dimension = Utilities.getWindowsize();
        this.setTitle("Intelligent Reader");
        this.setSize(dimension);
        addBrowsercomponent();
        initial_view();
        this.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTabview = new javax.swing.JTabbedPane();
        browserTabPanel = new javax.swing.JPanel();
        scholarTabPanel = new javax.swing.JPanel();
        informationViewtab = new javax.swing.JPanel();
        previousBtn = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();
        selectCombo = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        abstractArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        referenceTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        citedbyTable = new javax.swing.JTable();
        ProgressBar = new javax.swing.JProgressBar();
        sourceCheckBox = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFile = new javax.swing.JMenuItem();
        openUrl = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainTabview.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        browserTabPanel.setLayout(new java.awt.BorderLayout());
        mainTabview.addTab("Google", browserTabPanel);

        scholarTabPanel.setLayout(new java.awt.BorderLayout());
        mainTabview.addTab("Google Scholar", scholarTabPanel);

        previousBtn.setText("Previous");
        previousBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousBtnActionPerformed(evt);
            }
        });

        nextBtn.setText("Next");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });

        selectCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectComboActionPerformed(evt);
            }
        });

        abstractArea.setColumns(20);
        abstractArea.setLineWrap(true);
        abstractArea.setRows(5);
        abstractArea.setWrapStyleWord(true);
        abstractArea.setEnabled(false);
        jScrollPane1.setViewportView(abstractArea);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Abstract:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("References:");

        referenceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " Index", "Article title", "Year ", "Click"
            }
        ));
        jScrollPane2.setViewportView(referenceTable);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Cited by:");

        citedbyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "Article title", "Year", "Click"
            }
        ));
        jScrollPane3.setViewportView(citedbyTable);

        ProgressBar.setPreferredSize(new java.awt.Dimension(150, 20));

        sourceCheckBox.setText("Source material avaiable ");

        javax.swing.GroupLayout informationViewtabLayout = new javax.swing.GroupLayout(informationViewtab);
        informationViewtab.setLayout(informationViewtabLayout);
        informationViewtabLayout.setHorizontalGroup(
            informationViewtabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationViewtabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(informationViewtabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(informationViewtabLayout.createSequentialGroup()
                        .addComponent(previousBtn)
                        .addGap(18, 18, 18)
                        .addComponent(selectCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(nextBtn))
                    .addComponent(jScrollPane3)
                    .addGroup(informationViewtabLayout.createSequentialGroup()
                        .addGroup(informationViewtabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informationViewtabLayout.createSequentialGroup()
                        .addComponent(sourceCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 388, Short.MAX_VALUE)
                        .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        informationViewtabLayout.setVerticalGroup(
            informationViewtabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationViewtabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(informationViewtabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousBtn)
                    .addComponent(nextBtn)
                    .addComponent(selectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(informationViewtabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sourceCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainTabview.addTab("Information", informationViewtab);

        fileMenu.setText("File");

        openFile.setText("Open File");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        fileMenu.add(openFile);

        openUrl.setText("Open Primary File");
        openUrl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openUrlActionPerformed(evt);
            }
        });
        fileMenu.add(openUrl);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        fileMenu.add(exit);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabview)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabview)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // initial configuration
    public void initial_view() {
        InputStream inputStream;
        try {
            File f = new File("C:\\Users\\akhan\\Downloads\\IntelligentReader\\IntelligentReader\\Bunt_IUI2012.pdf");
            //parsing file name
            PdfTextParser parser = new PdfTextParser(f);
            primarypdffiletitle = parser.getArticleTitle();
            parser.closingPdfStream();
            System.out.println("Initial view -----Title of the paper :" + primarypdffiletitle);
            parser.closingPdfStream();

            //viewing pdf 
            inputStream = new FileInputStream(f);
            SwingController controller = new SwingController();
            // add interactive mouse link annotation support via callback
            controller.getDocumentViewController().setAnnotationCallback(
                    new org.icepdf.ri.common.MyAnnotationCallback(
                    controller.getDocumentViewController()));
            SwingViewBuilder factory = new SwingViewBuilder(controller);
            JPanel panel = factory.buildViewerPanel();
            panel.putClientProperty(SubstanceGraphiteLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, true);
            mainTabview.add("" + f.getName(), panel);
            controller.openDocument(inputStream, "", "");
            controller.setPageFitMode(org.icepdf.core.views.DocumentViewController.PAGE_FIT_WINDOW_WIDTH, false);
            controller.setPageViewMode(DocumentViewControllerImpl.ONE_COLUMN_VIEW, true);
            mainTabview.setSelectedIndex(mainTabview.getTabCount() - 1);

            //Query building
            searchquery = primarypdffiletitle.replaceAll(" ", "+");
            // google page update
            googleview.navigate("https://www.google.ca/search?q=" + searchquery);
            googlescholarview.navigate("http://scholar.google.ca/scholar?hl=en&q=" + searchquery);

            System.out.println("initialview ---- search query:" + searchquery);
            AcmDataCollectorSwingWorker worker = new AcmDataCollectorSwingWorker(searchquery, primarypdffiletitle);
            worker.execute();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Entrymain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Entrymain.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /*
     * View and Hide Elements
     */
    // adding browser component    
    public final void addBrowsercomponent() {
        NativeInterface.open();

        // initializing google view
        JPanel googlePanel = new JPanel(new BorderLayout());
        googleview.setBarsVisible(true);
        //webBrowser.setStatusBarVisible(false);
        googleview.navigate("http://www.google.com/");
        googlePanel.add(googleview, BorderLayout.CENTER);
        browserTabPanel.add(googlePanel, BorderLayout.CENTER);
        mainTabview.setSelectedIndex(1);

        // initializing google scholar view
        JPanel googlescholarPanel = new JPanel(new BorderLayout());
        googlescholarview.setBarsVisible(true);
        //webBrowser.setStatusBarVisible(false);
        googlescholarview.navigate("http://scholar.google.ca/");
        googlescholarPanel.add(googlescholarview, BorderLayout.CENTER);
        scholarTabPanel.add(googlescholarPanel, BorderLayout.CENTER);

        this.validate();
    }

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed

        InputStream inputStream;
        try {
            File f = Utilities.fileChooser();
            //parsing file name
            PdfTextParser parser = new PdfTextParser(f);
            primarypdffiletitle = parser.getArticleTitle();
            parser.closingPdfStream();
            System.out.println("open file Action ------Title of the paper :" + primarypdffiletitle);
            parser.closingPdfStream();

            //viewing pdf 
            inputStream = new FileInputStream(f);
            SwingController controller = new SwingController();
            // add interactive mouse link annotation support via callback
            controller.getDocumentViewController().setAnnotationCallback(
                    new org.icepdf.ri.common.MyAnnotationCallback(
                    controller.getDocumentViewController()));
            SwingViewBuilder factory = new SwingViewBuilder(controller);
            JPanel panel = factory.buildViewerPanel();
            panel.putClientProperty(SubstanceGraphiteLookAndFeel.TABBED_PANE_CLOSE_BUTTONS_PROPERTY, true);
            mainTabview.add("" + f.getName(), panel);
            controller.openDocument(inputStream, "", "");
            controller.setPageFitMode(org.icepdf.core.views.DocumentViewController.PAGE_FIT_WINDOW_WIDTH, false);
            controller.setPageViewMode(DocumentViewControllerImpl.ONE_COLUMN_VIEW, true);
            mainTabview.setSelectedIndex(mainTabview.getTabCount() - 1);
            //Query building
            searchquery = primarypdffiletitle.replaceAll(" ", "+");
            // google page update
            googleview.navigate("https://www.google.ca/search?q=" + searchquery);
            googlescholarview.navigate("http://scholar.google.ca/scholar?hl=en&q=" + searchquery);

            System.out.println("search query:" + primarypdffiletitle);
            AcmDataCollectorSwingWorker ad_openfile = new AcmDataCollectorSwingWorker(searchquery, primarypdffiletitle);
            ad_openfile.execute();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Entrymain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Entrymain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void openUrlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openUrlActionPerformed
    }//GEN-LAST:event_openUrlActionPerformed

    /*
     * Button Action
     * 
     */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void selectComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectComboActionPerformed
        // TODO add your handling code here:
        //System.err.println("Combo box" + selectCombo.getSelectedItem());
        //System.err.println("Item list" + articleList.get(selectCombo.getSelectedIndex()).getTitle());
        BtnenableDisable(selectCombo.getSelectedIndex());
        ShowinformationInTable(selectCombo.getSelectedIndex());
    }//GEN-LAST:event_selectComboActionPerformed

    private void previousBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousBtnActionPerformed
        // TODO add your handling code here:
        //System.err.println("previous Btn");
        selectCombo.setSelectedIndex(selectCombo.getSelectedIndex() - 1);
        //System.err.println("Combo box" + selectCombo.getSelectedItem());
        //System.err.println("Item list" + articleList.get(selectCombo.getSelectedIndex()).getTitle());
        BtnenableDisable(selectCombo.getSelectedIndex());
        ShowinformationInTable(selectCombo.getSelectedIndex());
    }//GEN-LAST:event_previousBtnActionPerformed

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        // TODO add your handling code here:
        //System.err.println("next Btn");
        selectCombo.setSelectedIndex(selectCombo.getSelectedIndex() + 1);
        //System.err.println("Combo box" + selectCombo.getSelectedItem());
        //System.err.println("Item list" + articleList.get(selectCombo.getSelectedIndex()).getTitle());
        BtnenableDisable(selectCombo.getSelectedIndex());
        ShowinformationInTable(selectCombo.getSelectedIndex());
    }//GEN-LAST:event_nextBtnActionPerformed

    public void BtnenableDisable(int current) {
        int total_count = articleList.size() - 1;
        if (current == 0) {
            if (current == total_count) {
                previousBtn.setEnabled(false);
                nextBtn.setEnabled(false);
            } else {
                nextBtn.setEnabled(true);
                previousBtn.setEnabled(false);
            }
        } else if (current == total_count) {
            nextBtn.setEnabled(false);
            previousBtn.setEnabled(true);
        } else {
            previousBtn.setEnabled(true);
            nextBtn.setEnabled(true);
        }
    }

    void ShowinformationInTable(int index) {
        // initializing reference table
        String title_text = articleList.get(index).getTitle();
        String query_text = title_text.replaceAll(" ", "+");

        googleview.navigate("https://www.google.ca/search?q=" + query_text);
        googlescholarview.navigate("http://scholar.google.ca/scholar?hl=en&q=" + query_text);

        DefaultTableModel referencemodel = new DefaultTableModel();
        Entrymain.referenceTable.setModel(referencemodel);
        referencemodel.addColumn("Index");
        referencemodel.addColumn("Article title");
        referencemodel.addColumn("year");
        referencemodel.addColumn("Click ");
        Entrymain.referenceTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);


        List<String> referencelist = articleList.get(index).getReferredarticles();
        for (int i = 0; i < referencelist.size(); i++) {
            String year = utilities.Utilities.getyear(referencelist.get(i));
            referencemodel.addRow(new Object[]{i + 1, referencelist.get(i), year, "More"});
        }

        Entrymain.referenceTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        Entrymain.referenceTable.getColumnModel().getColumn(1).setPreferredWidth(1100);
        Entrymain.referenceTable.getColumnModel().getColumn(2).setPreferredWidth(50);
        Entrymain.referenceTable.getColumnModel().getColumn(3).setPreferredWidth(50);



        Action show;
        show = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Entrymain.referenceTable = (JTable) e.getSource();
                int modelRow = Integer.valueOf(e.getActionCommand());
                System.out.println("Article name :" + ((DefaultTableModel) Entrymain.referenceTable.getModel()).getValueAt(modelRow, 1));
                String title_ref = Utilities.getTitle(((DefaultTableModel) Entrymain.referenceTable.getModel()).getValueAt(modelRow, 1).toString());
                String searchquery_ref = title_ref.replaceAll(" ", "+");
                googleview.navigate("https://www.google.ca/search?q=" + searchquery_ref);
                googlescholarview.navigate("http://scholar.google.ca/scholar?hl=en&q=" + searchquery_ref);
                AcmDataCollectorSwingWorker ad = new AcmDataCollectorSwingWorker(searchquery_ref, title_ref);
                ad.execute();
            }
        };
        ButtonColumn bc = new ButtonColumn(referenceTable, show, 3);
        bc.setMnemonic(KeyEvent.VK_D);


        // initializing cited by table
        DefaultTableModel citedmodel = new DefaultTableModel();
        citedbyTable.setModel(citedmodel);
        citedmodel.addColumn("Index");
        citedmodel.addColumn("Article title");
        citedmodel.addColumn("Year");
        citedmodel.addColumn("Click ");
        citedbyTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        List<String> citedlist = articleList.get(index).getCitiedarticle();
        for (int i = 0; i < citedlist.size(); i++) {
            String year = utilities.Utilities.getyear(citedlist.get(i));
            citedmodel.addRow(new Object[]{i + 1, citedlist.get(i), year, "More"});
        }

        citedbyTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        citedbyTable.getColumnModel().getColumn(1).setPreferredWidth(1100);
        citedbyTable.getColumnModel().getColumn(2).setPreferredWidth(50);
        citedbyTable.getColumnModel().getColumn(3).setPreferredWidth(50);

        Action citedshow = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                referenceTable = (JTable) e.getSource();
                int modelRow = Integer.valueOf(e.getActionCommand());
                System.out.println("Article name :" + ((DefaultTableModel) citedbyTable.getModel()).getValueAt(modelRow, 1));
                String title_citation = Utilities.getTitle(((DefaultTableModel) citedbyTable.getModel()).getValueAt(modelRow, 1).toString());
                String search_citation = title_citation.replaceAll(" ", "+");
                googleview.navigate("https://www.google.ca/search?q=" + search_citation);
                googlescholarview.navigate("http://scholar.google.ca/scholar?hl=en&q=" + search_citation);
                AcmDataCollectorSwingWorker ad_citation = new AcmDataCollectorSwingWorker(search_citation, title_citation);
                ad_citation.execute();

            }
        };
        ButtonColumn cite_bc = new ButtonColumn(citedbyTable, citedshow, 3);
        bc.setMnemonic(KeyEvent.VK_D);

        if (articleList.get(index).getVideoavailable()) {
            sourceCheckBox.setSelected(true);
        } else {
            sourceCheckBox.setSelected(false);
        }
        abstractArea.setText(articleList.get(index).getArticleabstract());
    }

    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try { //SubstanceBusinessBlueSteelLookAndFeel
                    UIManager.setLookAndFeel(new SubstanceBusinessBlueSteelLookAndFeel());
                } catch (UnsupportedLookAndFeelException ulafe) {
                    System.out.println("Substance failed to set");
                }
                new Entrymain().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JProgressBar ProgressBar;
    public static javax.swing.JTextArea abstractArea;
    private javax.swing.JPanel browserTabPanel;
    public static javax.swing.JTable citedbyTable;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu fileMenu;
    public static javax.swing.JPanel informationViewtab;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane mainTabview;
    private javax.swing.JMenuBar menuBar;
    public static javax.swing.JButton nextBtn;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JMenuItem openUrl;
    public static javax.swing.JButton previousBtn;
    public static javax.swing.JTable referenceTable;
    private javax.swing.JPanel scholarTabPanel;
    public static javax.swing.JComboBox selectCombo;
    public static javax.swing.JCheckBox sourceCheckBox;
    // End of variables declaration//GEN-END:variables
}
